# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

APP_NAME = "BeatMaster"
SCHEME = "BeatMaster-QA"

KEYCHAIN_NAME = ENV["KEYCHAIN_NAME"]
KEYCHAIN_PASSWORD = ENV["KEYCHAIN_PASSWORD"]
KEYCHAIN_PASSWORD_DB =  ENV["KEYCHAIN_PASSWORD_DB"]

#require 'spaceship'
#Spaceship::ConnectAPI::App.const_set('ESSENTIAL_INCLUDES', 'appStoreVersions')
ENV["FASTLANE_XCODEBUILD_SETTINGS_TIMEOUT"] = "600"

# Uncomment the line if you want fastlane to automatically update itself
update_fastlane

default_platform(:ios)

platform :ios do
   # ✅ 인증서를 키체인에 저장
  desc "Save To Keychain"
  lane :set_keychain do |options|
    sh"tuist signing decrypt"
    create_keychain(
      name: "#{KEYCHAIN_NAME}",
      password: "#{KEYCHAIN_PASSWORD}",
      default_keychain: true,
      unlock: true,
      timeout: 3600,
      lock_when_sleeps: true
    )

    import_certificate(
      certificate_path: "./Tuist/Signing/release.cer",
      keychain_name: "#{KEYCHAIN_NAME}",
      keychain_password: "#{KEYCHAIN_PASSWORD}"
    )

    import_certificate(
      certificate_path: "./Tuist/Signing/release.p12",
      keychain_name: "#{KEYCHAIN_NAME}",
      keychain_password: "#{KEYCHAIN_PASSWORD}"
    )
  end

desc "Install Profiles and Build My App"
  lane :build_ipa do
    clear_derived_data

    # sh"tuist signing decrypt"
    # sh"tuist clear"
    # sh"tuist fetch"
    # sh"tuist cache warm BeatMaster"	

 # install_provisioning_profile(path: "./Tuist/Signing/#{APP_NAME}.Release.mobileprovision")
  #unlock_keychain(
    #path: "/Users/suhwonji/Library/Keychains/BeatMaster-db",
   #password: "$KEYCHAIN_PASSWORD_DB"
 #) 
   build_app(
      workspace: "#{APP_NAME}.xcworkspace",
      scheme: "#{SCHEME}",
    silent: true,
    clean: true,
    output_directory: "./fastlane/output/",
    output_name: "BeatMaster.ipa",
      export_method: "app-store",
      export_options: {
      signingStyle: "automatic",
          uploadBitcode: false,
            provisioningProfiles: {
            "com.Haejoo.BeatMaster" => "BeatMaster",
           # "com.Haejoo.BeatMaster" => "BeatMasterAppStore"
             }
        }
    )
 
   end

 # ✅ 테스트 플라이트 업로드
  desc "Push to TestFlight"
  lane :QA do |options|
ENV["MATCH_PASSWORD"] = "Your_Secure_Passphrase"
	install_provisioning_profile(path: "Tuist/Signing/#{APP_NAME}.Release.mobileprovision")   

# ✅ 앱스토어 커넥트 키 연결
    app_store_connect_api_key(is_key_content_base64: true, in_house: false)

    # ✅ 버전 및 빌드 번호 가져오기
  #version_number = get_version_number(xcodeproj: "Projects/App/#{APP_NAME}.xcodeproj", target: "#{SCHEME}")
   #  build_number = latest_testflight_build_number(app_identifier: "com.Haejoo.BeatMaster") + 1

    # ✅ 빌드 넘버 증가
  increment_build_number(
  xcodeproj: "Projects/App/#{APP_NAME}.xcodeproj"
   )
  

# match(
    # git_url: "https://github.com/TrandyTuist/BeatMaster.git",
     # storage_mode: "git",
     # type: "appstore",
     # readonly: true,
     # keychain_name: "#{KEYCHAIN_NAME}",
    #  keychain_password: "#{KEYCHAIN_PASSWORD}"
   # )
    
  # match(
    # git_url: "https://github.com/TrandyTuist/BeatMaster.git",
    # storage_mode: "git",
    # type: "development",
   # readonly: true,
   # keychain_name: "#{KEYCHAIN_NAME}",
   #keychain_password: "#{KEYCHAIN_PASSWORD}"
  # )

 
     clear_derived_data
     sh"tuist fetch"
    # ✅ 빌드
    build_app(
      workspace: "#{APP_NAME}.xcworkspace",
      scheme: "#{SCHEME}",
      export_method: "app-store",
      clean: true, 
      verbose: true, 
      output_directory: "./fastlane/output/",
     export_options: {
       uploadBitcode: false
      }
    )

    # ✅ 테스트 플라이트 업로드
   upload_to_testflight(
       demo_account_required: true,
       beta_app_description:" BeatMaster",
       ipa:"./fastlane/output/BeatMaster.ipa",
       changelog:"변경사항",
       skip_waiting_for_build_processing: true)

 end
end
